map $http_origin $cors_header {
	default '';
	'~^https://(admin\.)?mustachebash\.com$' "$http_origin";
}

server {
    listen 80;
    listen [::]:80;
    server_name api.mustachebash.com;

    location / {
        return 301 https://api.mustachebash.com$request_uri;
    }

    location ^~ /.well-known {
        allow all;
        root  /data/letsencrypt/;
    }
}

server {
	listen 443 ssl http2;
    listen [::]:443 ssl http2;
	server_name api.mustachebash.com;

    ssl on;

    add_header Strict-Transport-Security "max-age=31536000" always;

    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 10m;

    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:!ADH:!AECDH:!MD5;";


    ssl_certificate /etc/letsencrypt/live/mustachebash.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mustachebash.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/mustachebash.com/chain.pem;

	proxy_hide_header Strict-Transport-Security;
	proxy_ignore_headers Set-Cookie;

	location / {
		# Set headers for preflights
		if ($request_method = 'OPTIONS') {
			# Tell client that this pre-flight info is valid for 20 days
			add_header 'Access-Control-Allow-Origin' "$cors_header";
			add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
			add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With';
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
			return 204;
		}

		try_files maintenance @api;
	}

	location @api {
		add_header 'Access-Control-Allow-Origin' "$cors_header" always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

		set $api api:4000;

		proxy_pass http://$api;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}
}
